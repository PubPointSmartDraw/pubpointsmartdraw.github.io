{"ast":null,"code":"'use strict';\n\nvar createAbortError = function createAbortError() {\n  var error = new Error('Delay aborted');\n  error.name = 'AbortError';\n  return error;\n};\n\nvar createDelay = function createDelay(willResolve) {\n  return function (ms) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        value = _ref.value,\n        signal = _ref.signal;\n\n    if (signal && signal.aborted) {\n      return Promise.reject(createAbortError());\n    }\n\n    var timeoutId;\n    var settle;\n    var rejectFn;\n\n    var signalListener = function signalListener() {\n      clearTimeout(timeoutId);\n      rejectFn(createAbortError());\n    };\n\n    var cleanup = function cleanup() {\n      if (signal) {\n        signal.removeEventListener('abort', signalListener);\n      }\n    };\n\n    var delayPromise = new Promise(function (resolve, reject) {\n      settle = function settle() {\n        cleanup();\n\n        if (willResolve) {\n          resolve(value);\n        } else {\n          reject(value);\n        }\n      };\n\n      rejectFn = reject;\n      timeoutId = setTimeout(settle, ms);\n    });\n\n    if (signal) {\n      signal.addEventListener('abort', signalListener, {\n        once: true\n      });\n    }\n\n    delayPromise.clear = function () {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n      cleanup();\n      settle();\n    };\n\n    return delayPromise;\n  };\n};\n\nvar delay = createDelay(true);\ndelay.reject = createDelay(false);\nmodule.exports = delay;\nmodule.exports.default = delay;","map":null,"metadata":{},"sourceType":"script"}