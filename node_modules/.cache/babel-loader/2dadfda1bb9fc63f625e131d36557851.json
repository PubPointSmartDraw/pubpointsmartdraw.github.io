{"ast":null,"code":"import _classCallCheck from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/src/pubpoint-studio/components/SceneBar.js\";\n\n/*****************************************************************************\n *\n * PubPoint Smart Draw Web application\n *\n * Developed for PubPoint Strategy by Eng. FEUYAN TCHOUO\n *\n * Copyright (C) PubPoint Strategy - All rights reserved.\n * Unauthorized copying of this file, via any medium is strictly prohibited.\n * Proprietary and confidential.\n * Written by FEUYAN TCHOUO <tca1audricfeuyan@gmail.com>, November 2018.\n *\n *****************************************************************************\n */\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport OpenInNewRounded from '@material-ui/icons/OpenInNewRounded';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport SceneItemContextMenu from './specific-components/SceneItemContextMenu';\nimport image from '../images/logoblack.png';\n/**\n* Composant responsable de l'ajout et de la suppression de scènes dans le projet. Il est visible dans la panel vertical de gauche dans l'application.\n*/\n\nvar SceneBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SceneBar, _Component);\n\n  /**\n  * Variable d'état du composant.\n  */\n\n  /**\n  * Constructeur du composant.\n  * @constructor\n  */\n  function SceneBar(props) {\n    var _this;\n\n    _classCallCheck(this, SceneBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SceneBar).call(this, props));\n    _this.state = {\n      assetOptionMenuOpen: false,\n      assetOptionMenuAnchorElement: null,\n      indexToDelete: 0\n    };\n\n    _this.handlerSceneSelected = function (event, index) {\n      if (!_this.state.assetOptionMenuOpen) {\n        _this.props.onSceneSelected(event, index);\n      }\n    };\n\n    _this.handlerDisplayMenuDesignBoardElement = function (event, index) {\n      event.preventDefault();\n\n      _this.setState({\n        assetOptionMenuOpen: true,\n        assetOptionMenuAnchorElement: event.currentTarget,\n        indexToDelete: index\n      });\n    };\n\n    _this.handlerCloseMenuDesignBoardElement = function () {\n      _this.setState({\n        assetOptionMenuOpen: false,\n        assetOptionMenuAnchorElement: null\n      });\n    };\n\n    _this.handlerAddNewScene = _this.handlerAddNewScene.bind(_assertThisInitialized(_this));\n    _this.handlerDeleteScene = _this.handlerDeleteScene.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n  * Gestionnaire de l'ajout d'une nouvelle scène.\n  * @param {object} scene - Scène à ajouter.\n  */\n\n\n  _createClass(SceneBar, [{\n    key: \"handlerAddNewScene\",\n    value: function handlerAddNewScene(scene) {\n      this.props.onAddNewScene(scene);\n    }\n    /**\n    * Gestionnaire de la sélection d'une scène.\n    * @param {event} event - Source de l'évènement.\n    * @param {number} index - Index de la scène sélectionnée.\n    */\n\n  }, {\n    key: \"handlerDeleteScene\",\n\n    /**\n    * Gestionnaire de la suppression d'une scène.\n    * @param {event} event - Source de l'évènement.\n    * @param {number} index - Index de la scène à supprimer.\n    */\n    value: function handlerDeleteScene(event, index) {\n      event.preventDefault();\n      this.setState({\n        assetOptionMenuOpen: false,\n        assetOptionMenuAnchorElement: null\n      });\n\n      if (index > 0) {\n        this.props.onDeleteScene(event, index);\n      }\n    }\n    /**\n    * Gestionnaire de l'affichage du menu contextuel des scène.\n    * @param {event} event - Source de l'évènement.\n    * @param {number} index - Index de la scène pour laquelle il faut afficher le menu contextuel.\n    */\n\n  }, {\n    key: \"render\",\n\n    /**\n    * Affiche les éléments d'interface du composant.\n    */\n    value: function render() {\n      var _this2 = this;\n\n      var sceneList = this.props.sceneList;\n      var nextSceneIndex = this.props.sceneListSize + 1;\n      var nextScene = {\n        snapshot: null,\n        transition: '',\n        duration: 0,\n        backgroundColor: \"#FFFFFF\"\n      };\n      var assetOptionMenuOpen = this.state.assetOptionMenuOpen;\n      var anchorElement = this.state.assetOptionMenuAnchorElement;\n      return React.createElement(Grid, {\n        item: true,\n        xs: 2,\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(GridList, {\n        cellHeight: 110,\n        cols: 1,\n        className: \"Scene-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, sceneList.map(function (tile, index) {\n        return React.createElement(GridListTile, {\n          key: tile.snapshot + \":\" + index,\n          className: \"Scene-item-display\",\n          onClick: function onClick(event) {\n            return _this2.handlerSceneSelected(event, index);\n          },\n          onContextMenu: function onContextMenu(event) {\n            return _this2.handlerDisplayMenuDesignBoardElement(event, index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: tile.snapshot,\n          alt: tile.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }), React.createElement(GridListTileBar, {\n          title: React.createElement(\"span\", {\n            className: \"Scene-title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          }, \"Scene \" + (index + 1)),\n          subtitle: React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, tile.transition),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), React.createElement(SceneItemContextMenu, {\n          assetOptionMenuOpen: assetOptionMenuOpen,\n          onCloseMenuDesignBoardElement: _this2.handlerCloseMenuDesignBoardElement,\n          anchorElement: anchorElement,\n          onDeleteScene: _this2.handlerDeleteScene,\n          itemIndex: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }));\n      }), React.createElement(GridListTile, {\n        key: image,\n        className: \"Scene-item-display Last-scene\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"fab\",\n        className: \"New-scene-button\",\n        onClick: function onClick() {\n          return _this2.handlerAddNewScene(nextScene);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(AddIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return SceneBar;\n}(Component);\n\nexport default SceneBar;","map":{"version":3,"sources":["/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/src/pubpoint-studio/components/SceneBar.js"],"names":["React","Component","Grid","IconButton","Button","AddIcon","OpenInNewRounded","DeleteOutlinedIcon","GridList","GridListTile","GridListTileBar","SceneItemContextMenu","image","SceneBar","props","state","assetOptionMenuOpen","assetOptionMenuAnchorElement","indexToDelete","handlerSceneSelected","event","index","onSceneSelected","handlerDisplayMenuDesignBoardElement","preventDefault","setState","currentTarget","handlerCloseMenuDesignBoardElement","handlerAddNewScene","bind","handlerDeleteScene","scene","onAddNewScene","onDeleteScene","sceneList","nextSceneIndex","sceneListSize","nextScene","snapshot","transition","duration","backgroundColor","anchorElement","map","tile","title"],"mappings":"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","sourcesContent":["\n/*****************************************************************************\n *\n * PubPoint Smart Draw Web application\n *\n * Developed for PubPoint Strategy by Eng. FEUYAN TCHOUO\n *\n * Copyright (C) PubPoint Strategy - All rights reserved.\n * Unauthorized copying of this file, via any medium is strictly prohibited.\n * Proprietary and confidential.\n * Written by FEUYAN TCHOUO <tca1audricfeuyan@gmail.com>, November 2018.\n *\n *****************************************************************************\n */\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport OpenInNewRounded from '@material-ui/icons/OpenInNewRounded';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nimport SceneItemContextMenu from './specific-components/SceneItemContextMenu';\n\nimport image from '../images/logoblack.png';\n\n/**\n* Composant responsable de l'ajout et de la suppression de scènes dans le projet. Il est visible dans la panel vertical de gauche dans l'application.\n*/\nclass SceneBar extends Component {\n  /**\n  * Variable d'état du composant.\n  */\n  state = {\n    assetOptionMenuOpen: false,\n    assetOptionMenuAnchorElement: null,\n    indexToDelete: 0,\n  };\n\n  /**\n  * Constructeur du composant.\n  * @constructor\n  */\n  constructor(props) {\n    super(props);\n    this.handlerAddNewScene = this.handlerAddNewScene.bind(this);\n    this.handlerDeleteScene = this.handlerDeleteScene.bind(this);\n  }\n\n  /**\n  * Gestionnaire de l'ajout d'une nouvelle scène.\n  * @param {object} scene - Scène à ajouter.\n  */\n  handlerAddNewScene(scene){\n    this.props.onAddNewScene(scene);\n  }\n\n  /**\n  * Gestionnaire de la sélection d'une scène.\n  * @param {event} event - Source de l'évènement.\n  * @param {number} index - Index de la scène sélectionnée.\n  */\n  handlerSceneSelected = (event, index) => {\n    if(!this.state.assetOptionMenuOpen){\n      this.props.onSceneSelected(event, index);\n    }\n  };\n\n  /**\n  * Gestionnaire de la suppression d'une scène.\n  * @param {event} event - Source de l'évènement.\n  * @param {number} index - Index de la scène à supprimer.\n  */\n  handlerDeleteScene(event, index){\n    event.preventDefault();\n    this.setState({\n      assetOptionMenuOpen: false,\n      assetOptionMenuAnchorElement: null,\n    });\n    if(index>0){\n      this.props.onDeleteScene(event, index);\n    }\n  }\n\n  /**\n  * Gestionnaire de l'affichage du menu contextuel des scène.\n  * @param {event} event - Source de l'évènement.\n  * @param {number} index - Index de la scène pour laquelle il faut afficher le menu contextuel.\n  */\n  handlerDisplayMenuDesignBoardElement = (event, index) => {\n    event.preventDefault();\n    this.setState({\n      assetOptionMenuOpen: true,\n      assetOptionMenuAnchorElement: event.currentTarget,\n      indexToDelete: index,\n    });\n  };\n\n  /**\n  * Gestionnaire de la fermeture du menu contextuel des scènes.\n  */\n  handlerCloseMenuDesignBoardElement = () => {\n    this.setState({\n      assetOptionMenuOpen: false,\n      assetOptionMenuAnchorElement: null,\n    });\n  };\n\n  /**\n  * Affiche les éléments d'interface du composant.\n  */\n  render() {\n    const sceneList = this.props.sceneList;\n    const nextSceneIndex = this.props.sceneListSize + 1;\n    const nextScene = {\n      snapshot: null,\n      transition: '',\n      duration: 0,\n      backgroundColor: \"#FFFFFF\",\n    };\n    const assetOptionMenuOpen = this.state.assetOptionMenuOpen;\n    const anchorElement = this.state.assetOptionMenuAnchorElement;\n    return (\n      <Grid item xs={2} sm={2}>\n        <GridList cellHeight={110} cols={1} className=\"Scene-bar\">\n          {sceneList.map((tile, index) => (\n           <GridListTile key={tile.snapshot+\":\"+index} className=\"Scene-item-display\"\n                         onClick={(event) => this.handlerSceneSelected(event, index)}\n                         onContextMenu={(event) => this.handlerDisplayMenuDesignBoardElement(event, index)} >\n             <img src={tile.snapshot} alt={tile.title}/>\n\n             <GridListTileBar\n               title={<span className=\"Scene-title\">{\"Scene \" + (index+1)}</span>}\n               subtitle={<span>{tile.transition}</span>}\n             />\n             <SceneItemContextMenu assetOptionMenuOpen={assetOptionMenuOpen}\n                                   onCloseMenuDesignBoardElement={this.handlerCloseMenuDesignBoardElement}\n                                   anchorElement={anchorElement}\n                                   onDeleteScene={this.handlerDeleteScene}\n                                   itemIndex={index} />\n           </GridListTile>\n         ))}\n         <GridListTile key={image} className=\"Scene-item-display Last-scene\">\n           <Button variant=\"fab\" className=\"New-scene-button\" onClick={() => this.handlerAddNewScene(nextScene)}>\n             <AddIcon />\n           </Button>\n          </GridListTile>\n       </GridList>\n\n      </Grid>\n    );\n  }\n}\n\nexport default SceneBar;\n"]},"metadata":{},"sourceType":"module"}