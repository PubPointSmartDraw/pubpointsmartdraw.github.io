{"ast":null,"code":"import _classCallCheck from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/src/pubpoint-studio/components/MainContent.js\";\n\n/*****************************************************************************\n *\n * PubPoint Smart Draw Web application\n *\n * Developed for PubPoint Strategy by Eng. FEUYAN TCHOUO\n *\n * Copyright (C) PubPoint Strategy - All rights reserved.\n * Unauthorized copying of this file, via any medium is strictly prohibited.\n * Proprietary and confidential.\n * Written by FEUYAN TCHOUO <tca1audricfeuyan@gmail.com>, November 2018.\n *\n *****************************************************************************\n */\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport SceneBar from './SceneBar';\nimport WorkSpace from './WorkSpace';\nimport AlertDialog from './specific-components/AlertDialog';\nvar DEFAULT_STATE_VALUE = {\n  sceneList: [{\n    snapshot: null,\n    transition: '',\n    duration: 0,\n    backgroundColor: \"#FFFFFF\"\n  }],\n  sceneListSize: 1,\n  sceneObjects: [[]],\n  selectedSceneIndex: 0,\n  alertDialogAddSceneOpen: false\n};\nvar TRANSFORM_CHANGE = \"Transform-change\";\nvar POSITION_CHANGE = \"Position-change\";\nvar UPDATE_ENTER_EFFECT = \"Enter-effect-change\";\nvar UPDATE_EXIT_EFFECT = \"Exit-effect-change\";\nvar UPDATE_ENTRANCE_DELAY = \"Entrance-delay-change\";\nvar UPDATE_ENTRANCE_DURATION = \"Entrance-duration-change\";\nvar UPDATE_EXIT_DELAY = \"Exit-delay-change\";\nvar UPDATE_EXIT_DURATION = \"Exit-duration-change\";\nvar UPDATE_TEXTFIELD = \"Update-textfield\";\n/**\n* Composant regroupant et gérant tous les éléments d'interface situés en dessous de la barre des menus.\n*/\n\nvar MainContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainContent, _Component);\n\n  /**\n  * Constructeur du composant.\n  * @constructor\n  */\n  function MainContent(props) {\n    var _this;\n\n    _classCallCheck(this, MainContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainContent).call(this, props));\n\n    _this.handlerAddNewScene = function (scene) {\n      var sList = _this.state.sceneList;\n      var updatedSceneList = sList.concat([scene]);\n      var oList = _this.state.sceneObjects;\n      var updatedObjectList = oList.concat([[]]);\n      var listSize = _this.state.sceneListSize + 1;\n\n      _this.setState({\n        sceneList: updatedSceneList,\n        sceneListSize: listSize,\n        sceneObjects: updatedObjectList\n      });\n    };\n\n    _this.handlerSceneSelected = function (event, index) {\n      _this.setState({\n        selectedSceneIndex: index\n      });\n    };\n\n    _this.handlerDeleteScene = function (event, indexToDelete) {\n      var sceneList = _this.state.sceneList;\n      var updatedSceneList = [];\n      var sceneObject = _this.state.sceneObjects;\n      var updatedSceneObject = [];\n      event.preventDefault();\n\n      for (var i = 0; i < sceneList.length; i++) {\n        if (i !== indexToDelete) {\n          updatedSceneList.push(sceneList[i]);\n        }\n      }\n\n      for (var _i = 0; _i < sceneObject.length; _i++) {\n        if (_i !== indexToDelete) {\n          updatedSceneObject.push(sceneObject[_i]);\n        }\n      }\n\n      _this.setState({\n        sceneList: updatedSceneList,\n        sceneObjects: updatedSceneObject,\n        selectedSceneIndex: 0\n      });\n    };\n\n    _this.handlerAddNewSceneObject = function (object) {\n      var objectList = _this.state.sceneObjects;\n      var currentIndex = _this.state.selectedSceneIndex;\n\n      if (objectList.length !== 0) {\n        var sObjects = objectList[currentIndex];\n        var updatedSobject;\n\n        if (object.type === \"landscape\") {\n          updatedSobject = sObjects.filter(function (item) {\n            return item.type !== \"landscape\";\n          });\n          updatedSobject = [object].concat(updatedSobject);\n        } else if (object.type === \"textfield\") {\n          object.name = object.inputText + \"--\" + objectList.length;\n          updatedSobject = sObjects.concat(object);\n        } else {\n          updatedSobject = sObjects.concat(object);\n        }\n\n        objectList[currentIndex] = updatedSobject;\n\n        _this.setState({\n          sceneObjects: objectList\n        });\n      } else {\n        _this.setState({\n          alertDialogAddSceneOpen: true\n        });\n      }\n    };\n\n    _this.handlerDeleteSceneObject = function (objectIndex) {\n      var objectList = _this.state.sceneObjects;\n      var currentSceneIndex = _this.state.selectedSceneIndex;\n\n      if (objectList.length !== 0) {\n        var sObjects = objectList[currentSceneIndex];\n        sObjects.splice(objectIndex, 1);\n        objectList[currentSceneIndex] = sObjects;\n\n        _this.setState({\n          sceneObjects: objectList\n        });\n      }\n    };\n\n    _this.handlerBringAssetForward = function (index) {\n      var objectList = _this.state.sceneObjects;\n      var currentSceneIndex = _this.state.selectedSceneIndex;\n\n      if (objectList.length !== 0) {\n        var sObjects = objectList[currentSceneIndex];\n        var currentObject = sObjects[index];\n\n        if (sObjects.length > index + 1) {\n          var nextObject = sObjects[index + 1];\n          sObjects[index] = nextObject;\n          sObjects[index + 1] = currentObject;\n          objectList[currentSceneIndex] = sObjects;\n\n          _this.setState({\n            sceneObjects: objectList\n          });\n        }\n      }\n    };\n\n    _this.handlerBringAssetBackward = function (index) {\n      var objectList = _this.state.sceneObjects;\n      var currentSceneIndex = _this.state.selectedSceneIndex;\n\n      if (objectList.length !== 0) {\n        var sObjects = objectList[currentSceneIndex];\n        var currentObject = sObjects[index];\n\n        if (index - 1 >= 0) {\n          var previousObject = sObjects[index - 1];\n          sObjects[index] = previousObject;\n          sObjects[index - 1] = currentObject;\n          objectList[currentSceneIndex] = sObjects;\n\n          _this.setState({\n            sceneObjects: objectList\n          });\n        }\n      }\n    };\n\n    _this.handlerAlertDialogAddSceneClose = function () {\n      _this.setState({\n        alertDialogAddSceneOpen: false\n      });\n    };\n\n    _this.handlerSceneBackgroundUpdated = function (data) {\n      var currentSceneIndex = _this.state.selectedSceneIndex;\n      var updatedSceneList = _this.state.sceneList;\n\n      if (data.snapshot) {\n        updatedSceneList[currentSceneIndex].snapshot = data.snapshot;\n      } else if (data.backgroundColor) {\n        updatedSceneList[currentSceneIndex].backgroundColor = data.backgroundColor;\n      }\n\n      _this.setState({\n        sceneList: updatedSceneList\n      });\n    };\n\n    _this.handlerSceneObjectUpdated = function (index, newProps, updateType) {\n      var objectList = _this.state.sceneObjects; //console.log(newProps);\n\n      var currentSceneIndex = _this.state.selectedSceneIndex;\n\n      if (objectList.length !== 0) {\n        var sObjects = objectList[currentSceneIndex];\n        var updatedSobject = sObjects[index];\n\n        if (updateType === POSITION_CHANGE) {\n          updatedSobject.x = newProps.x;\n          updatedSobject.y = newProps.y;\n        } else if (updateType === TRANSFORM_CHANGE) {\n          //console.log(newProps);\n          updatedSobject.width = newProps.width;\n          updatedSobject.height = newProps.height;\n          updatedSobject.rotation = newProps.rotation;\n        } else if (updateType === UPDATE_ENTER_EFFECT) {\n          //console.log(newProps);\n          updatedSobject.enterEffect = newProps.enterEffect;\n        } else if (updateType === UPDATE_EXIT_EFFECT) {\n          //console.log(newProps);\n          updatedSobject.exitEffect = newProps.exitEffect;\n        } else if (updateType === UPDATE_ENTRANCE_DELAY) {\n          //console.log(newProps);\n          updatedSobject.entranceDelay = parseInt(newProps.entranceDelay);\n        } else if (updateType === UPDATE_ENTRANCE_DURATION) {\n          //console.log(newProps);\n          updatedSobject.entranceDuration = parseInt(newProps.entranceDuration);\n        } else if (updateType === UPDATE_EXIT_DELAY) {\n          //console.log(newProps);\n          updatedSobject.exitDelay = parseInt(newProps.exitDelay);\n        } else if (updateType === UPDATE_EXIT_DURATION) {\n          //console.log(newProps);\n          updatedSobject.exitDuration = parseInt(newProps.exitDuration);\n        } else if (updateType === UPDATE_TEXTFIELD) {\n          //console.log(newProps);\n          updatedSobject = sObjects.filter(function (item) {\n            return item.name === newProps.name;\n          });\n        }\n\n        sObjects[index] = updatedSobject;\n\n        _this.updateSceneDuration(sObjects);\n\n        objectList[currentSceneIndex] = sObjects;\n\n        _this.setState({\n          sceneObjects: objectList\n        });\n      }\n    };\n\n    _this.updateSceneDuration = function (currentSceneObjects) {\n      var totalDuration = 0;\n      currentSceneObjects.map(function (object) {\n        var tempDuration = parseInt(object.entranceDelay) + parseInt(object.entranceDuration) + parseInt(object.exitDelay) + parseInt(object.exitDuration) + 1000;\n        totalDuration += tempDuration;\n      });\n      var scenes = _this.state.sceneList;\n      scenes[_this.state.selectedSceneIndex].duration = totalDuration;\n\n      _this.setState({\n        sceneList: scenes\n      });\n    };\n\n    _this.state = DEFAULT_STATE_VALUE;\n    return _this;\n  }\n  /**\n  * Fonction de la phase \"après mise à jour\" du cycle de vie du composant.\n  */\n\n\n  _createClass(MainContent, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.canSave) {\n        this.props.onSaveProject(this.state.sceneList, this.state.sceneListSize, this.state.sceneObjects);\n        this.props.onDeactivateProjectSave();\n      }\n    }\n    /**\n    * Gestionnaire de l'ajout d'une nouvelle scène.\n    * @param {object} scene - La scène à ajouter.\n    */\n\n  }, {\n    key: \"render\",\n\n    /**\n    * Affiche les éléments d'interface du composant.\n    */\n    value: function render() {\n      var scenes = this.state.sceneList;\n      var listSize = this.state.sceneListSize;\n      var currentSceneIndex = this.state.selectedSceneIndex;\n      var currentSceneObjects = [];\n\n      if (this.state.sceneObjects.length > currentSceneIndex) {\n        currentSceneObjects = this.state.sceneObjects[currentSceneIndex];\n      }\n\n      var alertDialogAddSceneOpen = this.state.alertDialogAddSceneOpen;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(SceneBar, {\n        sceneList: scenes,\n        sceneListSize: listSize,\n        onAddNewScene: this.handlerAddNewScene,\n        onDeleteScene: this.handlerDeleteScene,\n        onSceneSelected: this.handlerSceneSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }), React.createElement(AlertDialog, {\n        alertDialogOpen: alertDialogAddSceneOpen,\n        alertDialogTitle: \"Ajouter un objet dans le panel de création ?\",\n        alertDialogMessage: \"Veillez ajouter au préalable une scène dans le panneau de gauche pour pouvoir ajouter un objet.\",\n        alertDialogHandleClose: this.handlerAlertDialogAddSceneClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MainContent;\n}(Component);\n\nexport default MainContent;","map":{"version":3,"sources":["/media/audric/Data/Document/PubPoint/dev/sources/React/PubPointSmartDraw/finalApp/pubpointsmartdraw/src/pubpoint-studio/components/MainContent.js"],"names":["React","Component","Grid","SceneBar","WorkSpace","AlertDialog","DEFAULT_STATE_VALUE","sceneList","snapshot","transition","duration","backgroundColor","sceneListSize","sceneObjects","selectedSceneIndex","alertDialogAddSceneOpen","TRANSFORM_CHANGE","POSITION_CHANGE","UPDATE_ENTER_EFFECT","UPDATE_EXIT_EFFECT","UPDATE_ENTRANCE_DELAY","UPDATE_ENTRANCE_DURATION","UPDATE_EXIT_DELAY","UPDATE_EXIT_DURATION","UPDATE_TEXTFIELD","MainContent","props","handlerAddNewScene","scene","sList","state","updatedSceneList","concat","oList","updatedObjectList","listSize","setState","handlerSceneSelected","event","index","handlerDeleteScene","indexToDelete","sceneObject","updatedSceneObject","preventDefault","i","length","push","handlerAddNewSceneObject","object","objectList","currentIndex","sObjects","updatedSobject","type","filter","item","name","inputText","handlerDeleteSceneObject","objectIndex","currentSceneIndex","splice","handlerBringAssetForward","currentObject","nextObject","handlerBringAssetBackward","previousObject","handlerAlertDialogAddSceneClose","handlerSceneBackgroundUpdated","data","handlerSceneObjectUpdated","newProps","updateType","x","y","width","height","rotation","enterEffect","exitEffect","entranceDelay","parseInt","entranceDuration","exitDelay","exitDuration","updateSceneDuration","currentSceneObjects","totalDuration","map","tempDuration","scenes","canSave","onSaveProject","onDeactivateProjectSave"],"mappings":"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","sourcesContent":["/*****************************************************************************\n *\n * PubPoint Smart Draw Web application\n *\n * Developed for PubPoint Strategy by Eng. FEUYAN TCHOUO\n *\n * Copyright (C) PubPoint Strategy - All rights reserved.\n * Unauthorized copying of this file, via any medium is strictly prohibited.\n * Proprietary and confidential.\n * Written by FEUYAN TCHOUO <tca1audricfeuyan@gmail.com>, November 2018.\n *\n *****************************************************************************\n */\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport SceneBar from './SceneBar';\nimport WorkSpace from './WorkSpace';\nimport AlertDialog from './specific-components/AlertDialog';\n\nconst DEFAULT_STATE_VALUE = {\n  sceneList: [{\n    snapshot: null,\n    transition: '',\n    duration: 0,\n    backgroundColor: \"#FFFFFF\",\n  }],\n  sceneListSize: 1,\n  sceneObjects: [[]],\n  selectedSceneIndex: 0,\n  alertDialogAddSceneOpen: false,\n};\n\nconst TRANSFORM_CHANGE = \"Transform-change\";\nconst POSITION_CHANGE = \"Position-change\";\nconst UPDATE_ENTER_EFFECT = \"Enter-effect-change\";\nconst UPDATE_EXIT_EFFECT = \"Exit-effect-change\";\nconst UPDATE_ENTRANCE_DELAY = \"Entrance-delay-change\";\nconst UPDATE_ENTRANCE_DURATION = \"Entrance-duration-change\";\nconst UPDATE_EXIT_DELAY = \"Exit-delay-change\";\nconst UPDATE_EXIT_DURATION = \"Exit-duration-change\";\nconst UPDATE_TEXTFIELD = \"Update-textfield\";\n\n/**\n* Composant regroupant et gérant tous les éléments d'interface situés en dessous de la barre des menus.\n*/\nclass MainContent extends Component {\n  /**\n  * Constructeur du composant.\n  * @constructor\n  */\n  constructor(props) {\n    super(props);\n    this.state = DEFAULT_STATE_VALUE;\n  }\n\n  /**\n  * Fonction de la phase \"après mise à jour\" du cycle de vie du composant.\n  */\n  componentDidUpdate(){\n    if(this.props.canSave){\n      this.props.onSaveProject(this.state.sceneList, this.state.sceneListSize, this.state.sceneObjects);\n      this.props.onDeactivateProjectSave();\n    }\n  }\n\n  /**\n  * Gestionnaire de l'ajout d'une nouvelle scène.\n  * @param {object} scene - La scène à ajouter.\n  */\n  handlerAddNewScene = (scene) => {\n    const sList = this.state.sceneList;\n    const updatedSceneList = sList.concat([scene]);\n    const oList = this.state.sceneObjects;\n    const updatedObjectList = oList.concat([[]]);\n    const listSize = this.state.sceneListSize + 1;\n\n    this.setState({\n      sceneList: updatedSceneList,\n      sceneListSize: listSize,\n      sceneObjects: updatedObjectList,\n    });\n  };\n\n  /**\n  * Ecouteur de la scène sélectionnée par l'utilisateur. Cette fonction définie la scène active.\n  * @param {event} event - La source de l'évènement.\n  * @param {number} index - L'index de la scène sélectionnée.\n  */\n  handlerSceneSelected = (event, index) => {\n    this.setState({\n      selectedSceneIndex: index\n    });\n  };\n\n  /**\n  * Supprime la scène sélectionnée par l'utilisateur.\n  * @param {event} event - La source de l'évènement.\n  * @param {number} indexToDelete - L'index de la scène à supprimer.\n  */\n  handlerDeleteScene = (event, indexToDelete) => {\n    const sceneList = this.state.sceneList;\n    const updatedSceneList = [];\n    const sceneObject = this.state.sceneObjects;\n    const updatedSceneObject = [];\n\n    event.preventDefault();\n    for(let i=0; i<sceneList.length; i++){\n      if(i !== indexToDelete){\n        updatedSceneList.push(sceneList[i]);\n      }\n    }\n\n    for(let i=0; i<sceneObject.length; i++){\n      if(i !== indexToDelete){\n        updatedSceneObject.push(sceneObject[i]);\n      }\n    }\n\n    this.setState({\n      sceneList: updatedSceneList ,\n      sceneObjects: updatedSceneObject,\n      selectedSceneIndex: 0,\n    });\n  };\n\n  /**\n  * Ajoute un nouvel objet dans la scène active.\n  * @param {object} object - L'objet à ajouter à la scène.\n  */\n  handlerAddNewSceneObject = (object) => {\n    const objectList = this.state.sceneObjects;\n    const currentIndex = this.state.selectedSceneIndex;\n    if(objectList.length !== 0){\n      const sObjects = objectList[currentIndex];\n      var updatedSobject;\n      if(object.type === \"landscape\"){\n        updatedSobject = sObjects.filter(item => item.type !== \"landscape\");\n        updatedSobject = [object].concat(updatedSobject);\n      }else if(object.type === \"textfield\"){\n        object.name = object.inputText+\"--\"+objectList.length;\n        updatedSobject = sObjects.concat(object);\n      }else{\n        updatedSobject = sObjects.concat(object);\n      }\n      objectList[currentIndex] = updatedSobject;\n      this.setState({\n        sceneObjects: objectList,\n      });\n    }else{\n      this.setState({\n        alertDialogAddSceneOpen: true\n      });\n    }\n  };\n\n  /**\n  * Supprime un objet de la scène active.\n  * @param {number} objectIndex - L'index de l'objet à supprimer.\n  */\n  handlerDeleteSceneObject = (objectIndex) => {\n    var objectList = this.state.sceneObjects;\n    const currentSceneIndex = this.state.selectedSceneIndex;\n    if(objectList.length !== 0){\n      var sObjects = objectList[currentSceneIndex];\n      sObjects.splice(objectIndex, 1);\n      objectList[currentSceneIndex] = sObjects;\n      this.setState({\n        sceneObjects: objectList,\n      });\n    }\n  };\n\n  /**\n  * Avance l'objet sélectionné dans le plan de la scène.\n  * @param {number} index - Index dans la scène de l'objet à faire avancer.\n  */\n  handlerBringAssetForward = (index) => {\n    var objectList = this.state.sceneObjects;\n    const currentSceneIndex = this.state.selectedSceneIndex;\n    if(objectList.length !== 0){\n      var sObjects = objectList[currentSceneIndex];\n      var currentObject = sObjects[index];\n      if(sObjects.length > index+1){\n        var nextObject = sObjects[index+1];\n        sObjects[index] = nextObject;\n        sObjects[index+1] = currentObject;\n        objectList[currentSceneIndex] = sObjects;\n        this.setState({\n          sceneObjects: objectList,\n        });\n      }\n    }\n  };\n\n  /**\n  * Recule l'objet sélectionné dans le plan de la scène.\n  * @param {number} index - Index dans la scène de l'objet à faire reculer.\n  */\n  handlerBringAssetBackward = (index) => {\n    var objectList = this.state.sceneObjects;\n    const currentSceneIndex = this.state.selectedSceneIndex;\n    if(objectList.length !== 0){\n      var sObjects = objectList[currentSceneIndex];\n      var currentObject = sObjects[index];\n      if(index-1 >= 0){\n        var previousObject = sObjects[index-1];\n        sObjects[index] = previousObject;\n        sObjects[index-1] = currentObject;\n        objectList[currentSceneIndex] = sObjects;\n        this.setState({\n          sceneObjects: objectList,\n        });\n      }\n    }\n  };\n\n  /**\n  * Contrôle la fermeture du message d'erreur d'ajout d'un objet en absence de scène.\n  */\n  handlerAlertDialogAddSceneClose = () => {\n    this.setState({\n      alertDialogAddSceneOpen: false,\n    });\n  };\n\n\n  /**\n  * Gestionnaire de la mise à jour et sauvegarde de l'arrière plan d'une scène.\n  * @param {object} data - Données de l'arrière plan à sauvegarder.\n  */\n  handlerSceneBackgroundUpdated = (data) => {\n    const currentSceneIndex = this.state.selectedSceneIndex;\n    var updatedSceneList = this.state.sceneList;\n\n    if(data.snapshot){\n      updatedSceneList[currentSceneIndex].snapshot = data.snapshot;\n    }else if(data.backgroundColor){\n      updatedSceneList[currentSceneIndex].backgroundColor = data.backgroundColor;\n    }\n\n    this.setState({\n      sceneList: updatedSceneList,\n    });\n  };\n\n  /**\n  * Gestionnaire de la mise à jour d'un objet dans la scène.\n  * @param {number} index - Index de l'objet à mettre à jour.\n  * @param {object} newProps - Nouvelle propriétés de l'objet à mettre à jour.\n  * @param {String} updateType - Type de mise à jour à effectuer.\n  */\n  handlerSceneObjectUpdated = (index, newProps, updateType) => {\n    var objectList = this.state.sceneObjects;\n    //console.log(newProps);\n    const currentSceneIndex = this.state.selectedSceneIndex;\n    if(objectList.length !== 0){\n      var sObjects = objectList[currentSceneIndex];\n      var updatedSobject = sObjects[index];\n      if(updateType === POSITION_CHANGE){\n        updatedSobject.x = newProps.x;\n        updatedSobject.y = newProps.y;\n\n      }else if(updateType === TRANSFORM_CHANGE){\n        //console.log(newProps);\n        updatedSobject.width = newProps.width;\n        updatedSobject.height = newProps.height;\n        updatedSobject.rotation = newProps.rotation;\n\n      }else if(updateType === UPDATE_ENTER_EFFECT){\n        //console.log(newProps);\n        updatedSobject.enterEffect = newProps.enterEffect;\n\n      }else if(updateType === UPDATE_EXIT_EFFECT){\n        //console.log(newProps);\n        updatedSobject.exitEffect = newProps.exitEffect;\n\n      }else if(updateType === UPDATE_ENTRANCE_DELAY){\n        //console.log(newProps);\n        updatedSobject.entranceDelay = parseInt(newProps.entranceDelay);\n\n      }else if(updateType === UPDATE_ENTRANCE_DURATION){\n        //console.log(newProps);\n        updatedSobject.entranceDuration = parseInt(newProps.entranceDuration);\n\n      }else if(updateType === UPDATE_EXIT_DELAY){\n        //console.log(newProps);\n        updatedSobject.exitDelay = parseInt(newProps.exitDelay);\n\n      }else if(updateType === UPDATE_EXIT_DURATION){\n        //console.log(newProps);\n        updatedSobject.exitDuration = parseInt(newProps.exitDuration);\n\n      }else if(updateType === UPDATE_TEXTFIELD){\n        //console.log(newProps);\n        updatedSobject = sObjects.filter(item => item.name===newProps.name);\n      }\n\n      sObjects[index] = updatedSobject;\n      this.updateSceneDuration(sObjects);\n      objectList[currentSceneIndex] = sObjects;\n      this.setState({\n        sceneObjects: objectList,\n      });\n    }\n  };\n\n  /**\n  * Mise à jour de la durée d'une scène.\n  * @param {object} currentSceneObjects - Liste des objets de la scène.\n  */\n  updateSceneDuration = (currentSceneObjects) => {\n    var totalDuration = 0;\n    currentSceneObjects.map(object => {\n      var tempDuration = parseInt(object.entranceDelay) + parseInt(object.entranceDuration)\n                           + parseInt(object.exitDelay) + parseInt(object.exitDuration) + 1000;\n      totalDuration += tempDuration;\n    });\n\n    var scenes = this.state.sceneList;\n    scenes[this.state.selectedSceneIndex].duration = totalDuration;\n    this.setState({\n      sceneList : scenes,\n    });\n  };\n\n  /**\n  * Affiche les éléments d'interface du composant.\n  */\n  render(){\n    const scenes = this.state.sceneList;\n    const listSize = this.state.sceneListSize;\n    const currentSceneIndex = this.state.selectedSceneIndex;\n    var currentSceneObjects = [];\n    if(this.state.sceneObjects.length > currentSceneIndex){\n      currentSceneObjects = this.state.sceneObjects[currentSceneIndex];\n    }\n    const alertDialogAddSceneOpen = this.state.alertDialogAddSceneOpen;\n    return(\n      <div>\n        <Grid container>\n          <SceneBar sceneList={scenes} sceneListSize={listSize}\n                    onAddNewScene={this.handlerAddNewScene}\n                    onDeleteScene={this.handlerDeleteScene}\n                    onSceneSelected={this.handlerSceneSelected}/>\n          {/*<WorkSpace onAddNewSceneObject={this.handlerAddNewSceneObject}\n                     onDeleteSceneObject={this.handlerDeleteSceneObject}\n                     onBringAssetForward={this.handlerBringAssetForward}\n                     onBringAssetBackward={this.handlerBringAssetBackward}\n                     onSceneObjectUpdated={this.handlerSceneObjectUpdated}\n                     onSceneUpdated={this.handlerSceneBackgroundUpdated}\n                     objectList={currentSceneObjects}\n                     sceneList={scenes}\n                     selectedScene={currentSceneIndex}/>*/}\n          <AlertDialog alertDialogOpen={alertDialogAddSceneOpen}\n                       alertDialogTitle={\"Ajouter un objet dans le panel de création ?\"}\n                       alertDialogMessage={\"Veillez ajouter au préalable une scène dans le panneau de gauche pour pouvoir ajouter un objet.\"}\n                       alertDialogHandleClose={this.handlerAlertDialogAddSceneClose}/>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default MainContent;\n"]},"metadata":{},"sourceType":"module"}